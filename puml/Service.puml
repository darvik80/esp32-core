@startuml

skinparam backgroundColor White
skinparam classBackgroundColor LightGray
skinparam arrowColor DarkBlue
skinparam classBorderColor DarkBlue

enum SystemServiceId {
    Service_WIFI,
    Service_MQTT,
    Service_IoT,
};

interface Service {
    ServiceId getServiceId()
    void setup()
    void loop()
    Registry *getRegistry()
    MessageBus *getMessageBus()
}

interface PropertiesSource {
    std::string getStr(const std::string &name, const std::string &def)
    void setStr(const std::string &name, const std::string &value)
    uint16_t getUint16(const std::string &name, uint16_t def)
    void setUint16(const std::string &name, uint16_t value)
    Property *getProperty(const std::string &name)
    void setProperty(const std::string &name, Property* props)
    template<class T> T *get(const std::string &name)
}

interface Registry {
    template<typename C, typename ... T> void create(T &&... all)
    void add(Service *service)
    ServiceArray &getServices()
    template<typename C> C *getService(ServiceId id)
    MessageBus *getMessageBus()
    PropertiesSource *getProperties()
}

class TService {
    -Registry& _registry

    +Registry& getRegistry()
    +void setup()
    +void loop()
    +MessageBus *getMessageBus()
}

Service <|-- TService

class InCodePropertiesSource {
    +std::string getStr(const std::string &name, const std::string &def)
    +void setStr(const std::string &name, const std::string &value)
    +uint16_t getUint16(const std::string &name, uint16_t def)
    +void setUint16(const std::string &name, uint16_t value)
    +Property *getProperty(const std::string &name)
    +void setProperty(const std::string &name, Property* props)
}

PropertiesSource <|-- InCodePropertiesSource

class TRegistry {
    -ServiceArray _userServices
    -ServiceArray _sysServices
    -MessageBus &_bus
    -PropertiesSource *_props
    +void addSystemService(Service *service)
    +ServiceArray &getSystemServices()
    +void addUserService(Service *service)
    +ServiceArray &getUserServices()
    +MessageBus& getMessageBus()
    +PropertiesSource &getProperties()
}

Registry <|-- TRegistry

class WifiService {
    -Timer _reconnectTimer;
    -void raiseConnect()
    +ServiceId getServiceId() const
    +{static} void onTimer(WifiService *service)
    +void setup()
    +void onWifiEvent(arduino_event_id_t event, arduino_event_info_t info)
}

TService <|.. WifiService

class MQTTService {
    -AsyncMqttClient _mqttClient
    -std::string _clientId
    -std::string _username
    -std::string _password
    -std::string _host
    -uint16_t _port{}
    +ServiceId getServiceId()
    +void setup()
    +void onMessage(const char *topic, const char *payload, AsyncMqttClientMessageProperties properties, size_t len, size_t index, size_t total)
    +void onMqttConnect(bool sessionPresent)
    +void onMqttDisconnect(AsyncMqttClientDisconnectReason reason)
    +void onMqttSubscribe(uint16_t packetId, uint8_t qos)
    +void onMqttPublish(uint16_t packetId)
    +void onMessage(const WifiConnected &msg)
    +void onMessage(const WifiDisconnected &msg)
    +void publish(std::string_view topic, std::string_view data)
}

TService <|.. MQTTService

class JoystickService {
    -JoystickEvent _event;
    -JoystickProperties *_props{nullptr};

    +ServiceId getServiceId()
    +void setup()
    +void loop()
}

TService <|.. JoystickService

class DisplayService {
    -std::unique_ptr<U8G2> _display;
    -unsigned long _lastUpdate{0};
    -std::array<std::string, 5> _lines;

    -void refresh()

    +ServiceId getServiceId() const
    +void setText(int line, std::string_view text)

    +void setup()
    +void loop()
}

TService <|.. DisplayService

PropertiesSource --r[hidden]-> Service
ServiceId --r[hidden]-> Service

@enduml