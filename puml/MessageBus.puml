@startuml
'https://plantuml.com/class-diagram

skinparam backgroundcolor White
skinparam classBackgroundColor LightGray
skinparam arrowColor DarkBlue
skinparam classBorderColor DarkBlue

enum MessageId {
    WIFI_CONNECTED,
    WIFI_DISCONNECTED,
    MQTT_CONNECTED,
    MQTT_DISCONNECTED,
    MQTT_MESSAGE,
    JOYSTICK_EVENT,
}

interface Message {
    MsgId getMsgId() const
}

class WifiConnected {
    +std::string ip
    +std::string
    +std::string gateway
    +std::string macAddress

    MsgId getMsgId() const
}

WifiConnected <|.. Message

class WifiDisconnected {
    +MsgId getMsgId() const
}

WifiDisconnected <|.. Message

class MQTTConnected {
    +std::string address
    +MsgId getMsgId() const
}

MQTTConnected <|.. Message

class MQTTDisconnected {
    +MsgId getMsgId() const
}

MQTTDisconnected <|.. Message

class SystemMonitoringEvent {
    +float cpuTemp
}

SystemMonitoringEvent <|.. Message

class IoTTelemetry {
    std::string_view data
}

IoTTelemetry <|.. Message

class IoTCommand {
    std::string_view cmd
    std::string_view data
}

IoTCommand <|.. Message

interface MessageSubscriber {
    void onMessage(const Message &msg)
}

interface MessageProducer {
    void sendMessage(const Message &msg)
    void sendMessage(const std::shared_ptr<Message> &msg)
    void scheduleMessage(uint32_t delay, bool repeat, const std::shared_ptr<Message> &msg)
}

interface MessageBus {
    void subscribe(MessageSubscriber *subscriber)
    void loop()
}

MessageProducer <|-- MessageBus
MessageSubscriber <|-- MessageBus

class TMessageSubscriber {
    +void onMessage(const Message &msg)
}

TMessageSubscriber <|.. MessageSubscriber

class TMessageBus {
    +void subscribe(MessageSubscriber *subscriber)
    +void loop()

    +void onMessage(const Message &msg)

    +void sendMessage(const Message &msg)
    +void postMessage(const std::shared_ptr<Message> &msg)
    +void scheduleMessage(uint32_t delay, bool repeat, const std::shared_ptr<Message> &msg)
}

TMessageBus <|.. MessageBus

Message --d[hidden]-> MessageBus

@enduml